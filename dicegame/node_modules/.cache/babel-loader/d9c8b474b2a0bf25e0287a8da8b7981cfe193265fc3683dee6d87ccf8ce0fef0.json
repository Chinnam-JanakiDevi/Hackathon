{"ast":null,"code":"var _jsxFileName = \"D:\\\\Hackathon\\\\dicegame\\\\src\\\\Disease.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\nimport 'chart.js/auto';\nimport { Disease } from './DiseaseService';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CountrySelector = () => {\n  _s();\n  const [countries] = useState(['India', 'USA', 'Brazil']);\n  const [selectedCountry, setSelectedCountry] = useState('India');\n  const [covidData, setCovidData] = useState(null);\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const data = await Disease(selectedCountry);\n        setCovidData(data.timeline);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    getData();\n  }, [selectedCountry]);\n  const handleCountryChange = e => {\n    setSelectedCountry(e.target.value);\n  };\n\n  // const generateChartData = (data: CovidTimeline): ChartData<'line'> => {\n  //     const dates = Object.keys(data.cases);\n  //     const casesData = Object.values(data.cases);\n  //     const deathsData = Object.values(data.deaths);\n  //     const recoveredData = Object.values(data.recovered);\n\n  //     return {\n  //         labels: dates,\n  //         datasets: [\n  //             {\n  //                 label: 'Cases',\n  //                 data: casesData,\n  //                 borderColor: 'blue',\n  //                 fill: false,\n  //             },\n  //             {\n  //                 label: 'Deaths',\n  //                 data: deathsData,\n  //                 borderColor: 'red',\n  //                 fill: false,\n  //             },\n  //             {\n  //                 label: 'Recovered',\n  //                 data: recoveredData,\n  //                 borderColor: 'green',\n  //                 fill: false,\n  //             },\n  //         ],\n  //     };\n  // };\n\n  // const options: ChartOptions<'line'> = {\n  //     responsive: true,\n  //     scales: {\n  //         x: {\n  //             display: true,\n  //             title: {\n  //                 display: true,\n  //                 text: 'Date',\n  //             },\n  //         },\n  //         y: {\n  //             display: true,\n  //             title: {\n  //                 display: true,\n  //                 text: 'Count',\n  //             },\n  //         },\n  //     },\n  // };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"country-select\",\n        children: \"Select Country: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"country-select\",\n        value: selectedCountry,\n        onChange: handleCountryChange,\n        children: countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: country,\n          children: country\n        }, country, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n_s(CountrySelector, \"vqBIyquH9H0JWWCZP1IfD9irWaQ=\");\n_c = CountrySelector;\nexport default CountrySelector;\nvar _c;\n$RefreshReg$(_c, \"CountrySelector\");","map":{"version":3,"names":["React","useState","useEffect","Disease","jsxDEV","_jsxDEV","Fragment","_Fragment","CountrySelector","_s","countries","selectedCountry","setSelectedCountry","covidData","setCovidData","getData","data","timeline","error","console","handleCountryChange","e","target","value","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","onChange","map","country","_c","$RefreshReg$"],"sources":["D:/Hackathon/dicegame/src/Disease.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { ChartData, ChartOptions } from 'chart.js';\r\nimport 'chart.js/auto';\r\nimport { DiseaseDetails, Disease } from './DiseaseService';\r\n\r\ninterface CovidTimeline {\r\n    cases: { [date: string]: number };\r\n    deaths: { [date: string]: number };\r\n    recovered: { [date: string]: number };\r\n}\r\n\r\ninterface CovidResponse {\r\n    country: string;\r\n    province: string[];\r\n    timeline: CovidTimeline;\r\n}\r\n\r\nconst CountrySelector: React.FC = () => {\r\n    const [countries] = useState<string[]>(['India', 'USA', 'Brazil']);\r\n    const [selectedCountry, setSelectedCountry] = useState<string>('India');\r\n    const [covidData, setCovidData] = useState<CovidTimeline | null>(null);\r\n\r\n    useEffect(() => {\r\n        const getData = async () => {\r\n            try {\r\n                const data = await Disease(selectedCountry);\r\n                setCovidData(data.timeline);\r\n            } catch (error) {\r\n                console.error(error);\r\n            }\r\n        };\r\n        getData();\r\n    }, [selectedCountry]);\r\n\r\n    const handleCountryChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        setSelectedCountry(e.target.value);\r\n    };\r\n\r\n    // const generateChartData = (data: CovidTimeline): ChartData<'line'> => {\r\n    //     const dates = Object.keys(data.cases);\r\n    //     const casesData = Object.values(data.cases);\r\n    //     const deathsData = Object.values(data.deaths);\r\n    //     const recoveredData = Object.values(data.recovered);\r\n\r\n    //     return {\r\n    //         labels: dates,\r\n    //         datasets: [\r\n    //             {\r\n    //                 label: 'Cases',\r\n    //                 data: casesData,\r\n    //                 borderColor: 'blue',\r\n    //                 fill: false,\r\n    //             },\r\n    //             {\r\n    //                 label: 'Deaths',\r\n    //                 data: deathsData,\r\n    //                 borderColor: 'red',\r\n    //                 fill: false,\r\n    //             },\r\n    //             {\r\n    //                 label: 'Recovered',\r\n    //                 data: recoveredData,\r\n    //                 borderColor: 'green',\r\n    //                 fill: false,\r\n    //             },\r\n    //         ],\r\n    //     };\r\n    // };\r\n\r\n    // const options: ChartOptions<'line'> = {\r\n    //     responsive: true,\r\n    //     scales: {\r\n    //         x: {\r\n    //             display: true,\r\n    //             title: {\r\n    //                 display: true,\r\n    //                 text: 'Date',\r\n    //             },\r\n    //         },\r\n    //         y: {\r\n    //             display: true,\r\n    //             title: {\r\n    //                 display: true,\r\n    //                 text: 'Count',\r\n    //             },\r\n    //         },\r\n    //     },\r\n    // };\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <label htmlFor=\"country-select\">Select Country: </label>\r\n                <select id=\"country-select\" value={selectedCountry} onChange={handleCountryChange}>\r\n                    {countries.map((country) => (\r\n                        <option key={country} value={country}>\r\n                            {country}\r\n                        </option>\r\n                    ))}\r\n                </select>\r\n            </div>\r\n\r\n            {/* {covidData && <Line data={generateChartData(covidData)} options={options} />} */}\r\n\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CountrySelector;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD;;AAGA,OAAO,eAAe;AACtB,SAAyBC,OAAO,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAc3D,MAAMC,eAAyB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC,MAAM,CAACC,SAAS,CAAC,GAAGT,QAAQ,CAAW,CAAC,OAAO,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;EAClE,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAS,OAAO,CAAC;EACvE,MAAM,CAACY,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAuB,IAAI,CAAC;EAEtEC,SAAS,CAAC,MAAM;IACZ,MAAMa,OAAO,GAAG,MAAAA,CAAA,KAAY;MACxB,IAAI;QACA,MAAMC,IAAI,GAAG,MAAMb,OAAO,CAACQ,eAAe,CAAC;QAC3CG,YAAY,CAACE,IAAI,CAACC,QAAQ,CAAC;MAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACxB;IACJ,CAAC;IACDH,OAAO,CAAC,CAAC;EACb,CAAC,EAAE,CAACJ,eAAe,CAAC,CAAC;EAErB,MAAMS,mBAAmB,GAAIC,CAAuC,IAAK;IACrET,kBAAkB,CAACS,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACtC,CAAC;;EAED;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBACIlB,OAAA,CAAAE,SAAA;IAAAiB,QAAA,eACInB,OAAA;MAAAmB,QAAA,gBACInB,OAAA;QAAOoB,OAAO,EAAC,gBAAgB;QAAAD,QAAA,EAAC;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAO,CAAC,eACxDxB,OAAA;QAAQyB,EAAE,EAAC,gBAAgB;QAACP,KAAK,EAAEZ,eAAgB;QAACoB,QAAQ,EAAEX,mBAAoB;QAAAI,QAAA,EAC7Ed,SAAS,CAACsB,GAAG,CAAEC,OAAO,iBACnB5B,OAAA;UAAsBkB,KAAK,EAAEU,OAAQ;UAAAT,QAAA,EAChCS;QAAO,GADCA,OAAO;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEZ,CACX;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR;EAAC,gBAIR,CAAC;AAEX,CAAC;AAACpB,EAAA,CAzFID,eAAyB;AAAA0B,EAAA,GAAzB1B,eAAyB;AA2F/B,eAAeA,eAAe;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}